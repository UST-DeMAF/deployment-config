volumes:
  demaf:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ./volume
  rabbitmq_data:
  rabbitmq_logs:
  winery:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: ./winery

services:
  # Message Broker
  rabbitmq:
    image: rabbitmq:3.9-management
    hostname: demaf-rabbitmq
    container_name: demaf-rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Databases
  modelsdatabase:
    image: mongo:5.0.6
    hostname: modelsdatabase
    container_name: modelsdatabase
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: tad
      MONGO_INITDB_ROOT_PASSWORD: tad
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  configurationsdatabase:
    image: postgres:14.2
    hostname: configurationsdatabase
    container_name: configurationsdatabase
    restart: always
    environment:
      POSTGRES_USER: tad
      POSTGRES_PASSWORD: tad
      POSTGRES_DB: configurations
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "tad", "-d", "configurations"]
      interval: 10s
      timeout: 5s
      retries: 3

  tasksdatabase:
    image: postgres:14.2
    hostname: tasksdatabase
    container_name: tasksdatabase
    restart: always
    environment:
      POSTGRES_USER: tad
      POSTGRES_PASSWORD: tad
      POSTGRES_DB: tasks
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "tad", "-d", "tasks"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Core Services
  analysismanager:
    image: ghcr.io/ust-demaf/analysis-manager:latest
    hostname: analysismanager
    container_name: analysismanager
    depends_on:
      rabbitmq:
        condition: service_healthy
      configurationsdatabase:
        condition: service_healthy
      tasksdatabase:
        condition: service_healthy
    restart: always
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.configurations-datasource.jdbcUrl": "jdbc:postgresql://configurationsdatabase:5432/configurations",
        "spring.configurations-datasource.username": "tad",
        "spring.configurations-datasource.password": "tad",
        "spring.tasks-datasource.jdbcUrl": "jdbc:postgresql://tasksdatabase:5432/tasks",
        "spring.tasks-datasource.username": "tad",
        "spring.tasks-datasource.password": "tad",
        "models-service.url": "http://modelsservice:8081",
        "spring.rabbitmq.host": "rabbitmq"
        }'
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8080/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  modelsservice:
    image: ghcr.io/ust-demaf/models-service:latest
    hostname: modelsservice
    container_name: modelsservice
    depends_on:
      modelsdatabase:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      SPRING_DATA_MONGODB_USERNAME: tad
      SPRING_DATA_MONGODB_PASSWORD: tad
      SPRING_DATA_MONGODB_DATABASE: modelsdatabase
      SPRING_DATA_MONGODB_HOST: modelsdatabase
      SPRING_DATA_MONGODB_PORT: 27017
      TADM_OUTPUT_DIRECTORY: /usr/share/tadms
    volumes:
      - demaf:/usr/share
    ports:
      - 8081:8081
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8081/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Eclipse Winery
  winery:
    container_name: winery
    image: opentosca/winery:v3.0.9-M1
    environment:
      PUBLIC_HOSTNAME: "localhost"
      WINERY_FEATURE_RADON: "true"
      WINERY_REPOSITORY_PROVIDER: "yaml"
    volumes:
      - winery:/var/repository
    ports:
      - 8079:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Plugins
  bashplugin:
    image: ghcr.io/ust-demaf/bash-plugin:latest
    hostname: bashplugin
    container_name: bashplugin
    depends_on:
      analysismanager:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      ANALYSIS_MANAGER_PLUGIN_REGISTRATION_URL: http://analysismanager:8080/plugin-registration
      MODELS_SERVICE_URL: http://modelsservice:8081
      SPRING_RABBITMQ_HOST: rabbitmq
    volumes:
      - demaf:/usr/share
    ports:
      - 8083:8083
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8083/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  terraformplugin:
    image: ghcr.io/ust-demaf/terraform-mps-plugin:latest
    hostname: terraformplugin
    container_name: terraformplugin
    depends_on:
      analysismanager:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      ANALYSIS_MANAGER_PLUGIN_REGISTRATION_URL: http://analysismanager:8080/plugin-registration
      MODELS_SERVICE_URL: http://modelsservice:8081
      SPRING_RABBITMQ_HOST: rabbitmq
      RUNPROVIDERPOSTPROCESSORS: true # default true
    volumes:
      - demaf:/usr/share
    ports:
      - 8084:8084
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8084/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  kubernetesplugin:
    image: ghcr.io/ust-demaf/kubernetes-mps-plugin:latest
    hostname: kubernetesplugin
    container_name: kubernetesplugin
    depends_on:
      analysismanager:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      ANALYSIS_MANAGER_PLUGIN_REGISTRATION_URL: http://analysismanager:8080/plugin-registration
      MODELS_SERVICE_URL: http://modelsservice:8081
      SPRING_RABBITMQ_HOST: rabbitmq
    volumes:
      - demaf:/usr/share
    ports:
      - 8085:8085
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8085/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  helmplugin:
    image: ghcr.io/ust-demaf/helm-plugin:latest
    hostname: helmplugin
    container_name: helmplugin
    depends_on:
      analysismanager:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      ANALYSIS_MANAGER_PLUGIN_REGISTRATION_URL: http://analysismanager:8080/plugin-registration
      MODELS_SERVICE_URL: http://modelsservice:8081
      SPRING_RABBITMQ_HOST: rabbitmq
      KUBE_OUTPUT_DIRECTORY: /usr/share/helmTemplates
    volumes:
      - demaf:/usr/share
      - ./helmPlugin/helm:/usr/local/bin/helm
    ports:
      - 8086:8086
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8086/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  ansibleplugin:
    image: ghcr.io/ust-demaf/ansible-mps-plugin:latest
    hostname: ansibleplugin
    container_name: ansibleplugin
    depends_on:
      analysismanager:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      ANALYSIS_MANAGER_PLUGIN_REGISTRATION_URL: http://analysismanager:8080/plugin-registration
      MODELS_SERVICE_URL: http://modelsservice:8081
      SPRING_RABBITMQ_HOST: rabbitmq
    volumes:
      - demaf:/usr/share
    ports:
      - 8087:8087
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8087/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  dockerplugin:
    image: ghcr.io/ust-demaf/docker-plugin:latest
    hostname: dockerplugin
    container_name: dockerplugin
    depends_on:
      analysismanager:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      ANALYSIS_MANAGER_PLUGIN_REGISTRATION_URL: http://analysismanager:8080/plugin-registration
      MODELS_SERVICE_URL: http://modelsservice:8081
      SPRING_RABBITMQ_HOST: rabbitmq
    volumes:
      - demaf:/usr/share
    ports:
      - 8089:8089
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8089/actuator/health | grep 'UP' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  visualizationservice:
    image: ghcr.io/ust-demaf/visualization-service:latest
    hostname: visualizationservice
    container_name: visualizationservice
    depends_on:
      analysismanager:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      ANALYSIS_MANAGER_PLUGIN_REGISTRATION_URL: http://analysismanager:8080/plugin-registration
      MODELS_SERVICE_URL: http://modelsservice:8081
      SPRING_RABBITMQ_HOST: rabbitmq
      WINERY_PATH: /var/repository
    volumes:
      - demaf:/usr/share
      - winery:/var/repository
    ports:
      - 8082:8082
    healthcheck:
      test: [ "CMD-SHELL", "curl -fs http://localhost:8082/actuator/health | grep 'UP' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3

# Web-UI
  web-ui:
    image: ghcr.io/ust-demaf/web-ui:latest
    hostname: web-ui
    container_name: web-ui
    depends_on:
      ansibleplugin:
        condition: service_healthy
      bashplugin:
        condition: service_healthy
      dockerplugin:
        condition: service_healthy
      helmplugin:
        condition: service_healthy
      kubernetesplugin:
        condition: service_healthy
      terraformplugin:
        condition: service_healthy
      visualizationservice:
        condition: service_healthy
      winery:
        condition: service_healthy
    restart: always
    environment:
      DEMAF_ANALYSIS_MANAGER_URL: http://analysismanager:8080
      DEMAF_DOMAIN: localhost
      DEMAF_HTTPS: false
      DEMAF_WINERY_URL: http://winery:8080
    volumes:
      - demaf:/usr/share
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:80/"]
      interval: 10s
      timeout: 5s
      retries: 3